#!/usr/bin/env perl
# ===============================================================================
#
# Copyright (c) 2013, Lawrence Livermore National Security, LLC.
# Produced at the Lawrence Livermore National Laboratory.
# Written by Jeff Long <long6@llnl.gov>, et. al.
# LLNL-CODE-640252
#
# This file is part of Lorenz.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (as published by the
# Free Software Foundation) version 2, dated June 1991.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the IMPLIED WARRANTY OF
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# terms and conditions of the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# ===============================================================================


# Auto-generates the entire contents of the Simple.pm package.
#
# Run this in the directory where User.pm, Host.pm, System.pm, etc. reside

use strict;

#--------------------------------------------------
# Edit this list if you want to add objects from another package to Simple....
my @packageFiles = qw(Bank.pm Cluster.pm Host.pm System.pm User.pm Util.pm);
#--------------------------------------------------

# Shouldn't need to edit anything below here....

my $docout="";  #  Simple method/sub list for documentation purposes

my $out = getModuleBeginning(@packageFiles);
$out .= "use Class::Delegator\n";

foreach my $file (@packageFiles) {
	my $delegatedObjName = $file;
	$delegatedObjName =~ s/\.pm$//;
	$delegatedObjName = lc($delegatedObjName);
	die("Do not see $file\n") unless -e $file;
	$docout .= "$file : ";

	my @subs = `grep '^sub ' $file 2>/dev/null`;

	my $firstSub = 1;
	foreach my $sub (sort @subs) {
		next if ($sub =~ / _/);   # Skip internal subs
		$out .= ($firstSub) ? "     send => [qw(" : "                 ";

		$sub =~ m/sub\s+(\w+)/;
		$out .= "$1\n";
		$firstSub = 0;
		$docout .= "$1 "
	}

	$out .= "              )],\n     to => \'{$delegatedObjName}\',\n\n";
	$docout .= "\n";
}
chop $out; chop $out; chop $out;
$out .= "\n;\n";

$out .= getModuleEnding(@packageFiles);
print $out;

open (F, ">lorenz-sub-doc.txt");
print F $docout;
close F;

exit;







sub getModuleBeginning {
	my @packageFiles = @_;

	my $s=<<'EOF';
package Lorenz::Simple;

###########################################################################
# $URL$
# $Author$
# $Date$
# $Rev$
###########################################################################


#===============================================================================
#									Simple.pm (auto-generated)
#-------------------------------------------------------------------------------
#  Purpose:		Provide simple high-level Perl API to Lorenz server functions.
#  Author:		Jeff Long, 2/18/2013
#  Notes:
#
#				This module is auto-generated by running the generateSimplePm.pl
#				script. Do not edit this file directly.
#===============================================================================

use strict;
use Class::Delegator;

use Lorenz::Base;
EOF

	foreach my $f (@packageFiles) {
		$f =~ s/\.pm//;
		$s .= "use Lorenz::$f;\n";
    }

	$s .= <<'EOF';
use vars qw(@ISA);
@ISA = ("Lorenz::Base");

my $className = "Simple";

EOF
	return $s;
}

sub getModuleEnding {
	my @packageFiles = @_;

	my $s=<<'EOF';

sub new {
	my $proto = shift;
	my $class = ref($proto) || $proto;
	my $self  = {};

	$className = $class;

	my $args = shift;
	if ($args) {
		foreach (keys %$args) {
			$self->{$_} = $args->{$_};
		}
	}
	# Sub-objects to which methods should be delegated.
EOF

	foreach my $f (@packageFiles) {
		$f =~ s/\.pm//;
		$s .= sprintf("\t%-20s = Lorenz::%s\-\>new();\n", "\$self->{" . lc($f) . "}", $f);
    }

	$s .=<<'EOF';

	bless ($self, $class);
	return $self;
}

1;

EOF
	return $s;
}
